{"version":3,"file":"index.esm.js","sources":["../src/lib/paths.js","../src/lib/match-options.js","../src/lib/get-file.js","../src/type/copy.js","../src/type/custom.js","../src/lib/encode.js","../src/type/rebase.js","../src/type/inline.js","../src/lib/decl-processor.js","../src/index.js"],"sourcesContent":["import path from \"path\"\nimport url from \"url\"\n\n/**\n * Normalizing result url, before replace decl value\n *\n * @param {string} assetUrl\n * @returns {string}\n */\nexport const normalize = (assetUrl) => {\n  assetUrl = path.normalize(assetUrl)\n\n  if (path.sep === \"\\\\\") {\n    assetUrl = assetUrl.replace(/\\\\/g, \"/\")\n  }\n\n  if (assetUrl.charAt(0) !== \".\" && assetUrl.charAt(0) !== \"/\") {\n    assetUrl = `./${  assetUrl}`\n  }\n\n  return assetUrl\n}\n\n/**\n * @param {string} assetUrl\n * @returns {boolean}\n */\nexport const isUrlWithoutPathname = (assetUrl) => {\n  return (\n    assetUrl[0] === \"#\" ||\n    assetUrl.indexOf(\"%23\") === 0 ||\n    assetUrl.indexOf(\"data:\") === 0 ||\n    (/^[a-z]+:\\/\\//).test(assetUrl)\n  )\n}\n\n/**\n * Check if url is absolute, hash or data-uri\n *\n * @param {string} assetUrl\n * @param {PostcssUrl~Options} options\n * @returns {boolean}\n */\nexport const isUrlShouldBeIgnored = (assetUrl, options) => {\n  return isUrlWithoutPathname(assetUrl) || (assetUrl[0] === \"/\" && !options.basePath)\n}\n\n/**\n * @param {string} baseDir - absolute target path\n * @param {string} assetsPath - extend asset path, can be absolute path\n * @param {string} relative - current relative asset path\n * @returns {string}\n */\nexport const getAssetsPath = (baseDir, assetsPath, relative) =>\n  path.resolve(baseDir, assetsPath || \"\", relative || \"\")\n\n/**\n * Target path, output base dir\n *\n * @param {Dir} dir\n * @returns {string}\n */\nexport const getTargetDir = (dir) => (dir.from !== dir.to ? dir.to : process.cwd())\n\n/**\n * Stylesheet file path from decl\n *\n * @param {Decl} decl\n * @returns {string}\n */\nexport const getPathDeclFile = (decl) =>\n  decl.source && decl.source.input && decl.source.input.file\n\n/**\n * Stylesheet file dir from decl\n *\n * @param {Decl} decl\n * @returns {string}\n */\nexport const getDirDeclFile = (decl) => {\n  const filename = getPathDeclFile(decl)\n\n  return filename ? path.dirname(filename) : process.cwd()\n}\n\n/**\n * Returns paths list, where we can find assets file\n *\n * @param {Array<string>|string} basePath - base paths where trying search to assets file\n * @param {Dir} dirFrom\n * @param {string} relPath - relative asset path\n * @returns {Array<string>}\n */\nexport const getPathByBasePath = (basePath, dirFrom, relPath) => {\n  if (relPath[0] === \"/\") {\n    relPath = `.${relPath}`\n  }\n\n  basePath = !Array.isArray(basePath) ? [ basePath ] : basePath\n\n  return basePath.map((pathItem) => getAssetsPath(dirFrom, pathItem, relPath))\n}\n\n/**\n * Preparing asset paths and data\n *\n * @param {string} assetUrl\n * @param {PostcssUrl~Dir} dir\n * @param {Decl} decl\n * @returns {PostcssUrl~Asset}\n */\nexport const prepareAsset = (assetUrl, dir, decl) => {\n  const parsedUrl = url.parse(assetUrl)\n  const pathname = !isUrlWithoutPathname(assetUrl) ? parsedUrl.pathname : null\n  const absolutePath = pathname ?\n    path.resolve(path.join(dir.file, pathname)) :\n    getPathDeclFile(decl)\n\n  return {\n    url: assetUrl,\n    originUrl: assetUrl,\n    pathname,\n    absolutePath: absolutePath || dir.from,\n    relativePath: absolutePath ? path.relative(dir.from, absolutePath) : \".\",\n    search: parsedUrl.search || \"\",\n    hash: parsedUrl.hash || \"\"\n  }\n}\n\n/**\n * @typedef {Object} PostcssUrl~Asset\n * @property {String} url - origin asset url\n * @property {String} name - parsed asset filename\n * @property {String} absolutePath - absolute asset path\n * @property {String} relativePath - relative asset path (relative to target dir)\n * @property {String} search - search from url, ex. ?query=1\n * @property {String} hash - hash from url\n */\n\n/**\n * @typedef {Object} PostcssUrl~Dir\n * @property {String} from - dirname from postcss option 'from'\n * @property {String} to - dirname from postcss option 'to'\n * @property {String} file - decl file dirname (css file)\n */\n","import path from \"path\"\nimport minimatch from \"minimatch\"\nimport { isUrlShouldBeIgnored } from \"./paths\"\n\n/**\n * Returns whether the given asset matches the given pattern\n * Allways returns true if the given pattern is empty\n *\n * @param {PostcssUrl~Asset} asset the processed asset\n * @param {string|RegExp|Function} pattern A minimatch string,\n *   regular expression or function to test the asset\n *\n * @returns {boolean}\n */\nconst matchesFilter = (asset, pattern) => {\n  const relativeToRoot = path.relative(process.cwd(), asset.absolutePath)\n\n  if (typeof pattern === \"string\") {\n    pattern = minimatch.filter(pattern)\n\n    return pattern(relativeToRoot)\n  }\n\n  if (pattern instanceof RegExp) {\n    return pattern.test(relativeToRoot)\n  }\n\n  if (pattern instanceof Function) {\n    return pattern(asset)\n  }\n\n  return true\n}\n\n/**\n * Matching single option\n *\n * @param {PostcssUrl~Asset} asset\n * @param {PostcssUrl~Options} option\n * @returns {boolean}\n */\nconst matchOption = (asset, option) => {\n  const matched = matchesFilter(asset, option.filter)\n\n  if (!matched) return false\n\n  return typeof option.url === \"function\" || !isUrlShouldBeIgnored(asset.url, option)\n}\n\nconst isMultiOption = (option) => option.multi && typeof option.url === \"function\"\n\n/**\n * Matching options by asset\n *\n * @param {PostcssUrl~Asset} asset\n * @param {PostcssUrl~Options|PostcssUrl~Options[]} options\n * @returns {PostcssUrl~Options|undefined}\n */\nconst matchOptions = (asset, options) => {\n  if (!options) return\n\n  if (Array.isArray(options)) {\n    const optionIndex = options.findIndex((option) => matchOption(asset, option))\n\n    if (optionIndex < 0) return\n\n    const matchedOption = options[optionIndex]\n\n    // if founded option is last\n    if (optionIndex === options.length - 1) return matchedOption\n\n    const extendOptions = options\n      .slice(optionIndex + 1)\n      .filter(\n        (option) =>\n          (isMultiOption(matchedOption) || isMultiOption(option)) &&\n          matchOption(asset, option)\n      )\n\n    return extendOptions.length ? [ matchedOption ].concat(extendOptions) : matchedOption\n  }\n\n  if (matchOption(asset, options)) return options\n}\n\nexport default matchOptions\n","import fs from \"fs\"\nimport mime from \"mime/lite\"\nimport { getPathByBasePath } from \"./paths\"\n\n/**\n *\n * @param {PostcssUrl~Asset} asset\n * @param {PostcssUrl~Options} options\n * @param {PostcssUrl~Dir} dir\n * @param {Function} warn\n * @returns {PostcssUrl~File}\n */\nconst getFile = (asset, options, dir, warn) => {\n  const paths = options.basePath ?\n    getPathByBasePath(options.basePath, dir.from, asset.pathname) :\n    [ asset.absolutePath ]\n  const filePath = paths.find(fs.existsSync)\n\n  if (!filePath) {\n    warn(`Can't read file '${paths.join()}', ignoring`)\n\n    return\n  }\n\n  return {\n    path: filePath,\n    mimeType: mime.getType(filePath)\n  }\n}\n\nexport default getFile\n\n/**\n * @typedef {Object} PostcssUrl~File\n * @property {String} path\n * @property {Buffer} contents\n * @property {String} mimeType\n */\n","import fs from \"fs\"\nimport path from \"path\"\nimport cpFile from \"cp-file\"\nimport { getHashedName } from \"asset-hash\"\nimport getFile from \"../lib/get-file\"\nimport { getAssetsPath, getTargetDir, normalize } from \"../lib/paths\"\n\nconst getHashName = (file, options) => getHashedName(file.path, options)\n\n/**\n * Copy images from readed from url() to an specific assets destination\n * (`assetsPath`) and fix url() according to that path.\n * You can rename the assets by a hash or keep the real filename.\n *\n * Option assetsPath is require and is relative to the css destination (`to`)\n *\n * @type {PostcssUrl~UrlProcessor}\n * @param {PostcssUrl~Asset} asset\n * @param {PostcssUrl~Dir} dir\n * @param {PostcssUrl~Option} options\n * @param {PostcssUrl~Decl} decl\n * @param {Function} warn\n * @param {Result} result\n * @param {Function} addDependency\n *\n * @returns {string|Undefined}\n */\nexport default async function processCopy(\n  asset,\n  dir,\n  options,\n  decl,\n  warn,\n  result,\n  addDependency\n) {\n  if (!options.assetsPath && dir.from === dir.to) {\n    warn(\"Option `to` of postcss is required, ignoring\")\n\n    return\n  }\n\n  const file = getFile(asset, options, dir, warn)\n\n  if (!file) return\n\n  addDependency(file.path)\n\n  let assetRelativePath = options.useHash ?\n    await getHashName(file, options.hashOptions) :\n    asset.relativePath\n  if (options.useHash && options.keepName) {\n    const pathObj = path.parse(assetRelativePath)\n\n\n    const fileName = path.parse(asset.relativePath).name\n    pathObj.name = `${fileName}_${pathObj.name}`\n    delete pathObj.base // otherwise it would override name\n    assetRelativePath = path.format(pathObj)\n  }\n\n  const targetDir = getTargetDir(dir)\n  const newAssetBaseDir = getAssetsPath(targetDir, options.assetsPath)\n  const newAssetPath = path.join(newAssetBaseDir, assetRelativePath)\n  const newRelativeAssetPath = normalize(path.relative(targetDir, newAssetPath))\n\n  await cpFile(file.path, newAssetPath, { overwrite: false })\n\n  return `${newRelativeAssetPath}${asset.search}${asset.hash}`\n}\n","/**\n * Transform url() based on a custom callback\n *\n * @type {PostcssUrl~UrlProcessor}\n * @param {PostcssUrl~Asset} asset\n * @param {PostcssUrl~Dir} dir\n * @param {PostcssUrl~Option} options\n *\n * @returns {string|Undefined}\n */\nexport default function getCustomProcessor(asset, dir, options) {\n  return options.url.apply(null, arguments)\n}\n","import { readFile } from \"fs\"\nimport pify from \"pify\"\n\nconst readFileAsync = pify(readFile)\n\n/**\n * Optimize encoding SVG files (IE9+, Android 3+)\n *\n * @see https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n *\n * @param {string} svgContent\n * @returns {string}\n */\nconst optimizedSvgEncode = (svgContent) => {\n  const result = encodeURIComponent(svgContent)\n    .replace(/%3D/g, \"=\")\n    .replace(/%3A/g, \":\")\n    .replace(/%2F/g, \"/\")\n    .replace(/%22/g, \"'\")\n    .replace(/%2C/g, \",\")\n    .replace(/%3B/g, \";\")\n\n  // Lowercase the hex-escapes for better gzipping\n  return result.replace(/(%[0-9A-Z]{2})/g, (matched, AZ) => {\n    return AZ.toLowerCase()\n  })\n}\n\n/**\n * Encoding file contents to string\n *\n * @param {PostcssUrl~File} file\n * @param {string} [encodeType=base64|encodeURI|encodeURIComponent]\n * @param {boolean} [shouldOptimizeURIEncode]\n * @returns {string}\n */\nexport default async (file, encodeType, shouldOptimizeSvgEncode) => {\n  const dataMime = `data:${file.mimeType}`\n\n  const contents = await readFileAsync(file.path)\n\n  if (encodeType === \"base64\") {\n    return `${dataMime};base64,${contents.toString(\"base64\")}`\n  }\n\n  const encodeFunc = encodeType === \"encodeURI\" ? encodeURI : encodeURIComponent\n\n  const content = contents\n    .toString(\"utf8\")\n\n    // removing new lines\n    .replace(/\\n+/g, \"\")\n\n  let encodedStr =\n    shouldOptimizeSvgEncode && encodeType === \"encodeURIComponent\" ?\n      optimizedSvgEncode(content) :\n      encodeFunc(content)\n\n  encodedStr = encodedStr.replace(/%20/g, \" \").replace(/#/g, \"%23\")\n\n  return `${dataMime},${encodedStr}`\n}\n","import path from \"path\"\nimport { normalize } from \"../lib/paths\"\n\n/**\n * Fix url() according to source (`from`) or destination (`to`)\n *\n * @type {PostcssUrl~UrlProcessor}\n * @param {PostcssUrl~Asset} asset\n * @param {PostcssUrl~Dir} dir\n *\n * @returns {string|Undefined}\n */\nexport default function(asset, dir) {\n  const rebasedUrl = normalize(path.relative(dir.to, asset.absolutePath))\n  return `${rebasedUrl}${asset.search}${asset.hash}`\n}\n","import fs from \"fs\"\nimport encodeFile from \"../lib/encode\"\nimport getFile from \"../lib/get-file\"\nimport processCopy from \"./copy\"\nimport processRebase from \"./rebase\"\n\n/**\n * @param {string} originUrl\n * @param {PostcssUrl~Dir} dir\n * @param {PostcssUrl~Option} options\n *\n * @returns {string|Undefined}\n */\nfunction processFallback(originUrl, dir, options) {\n  if (typeof options.fallback === \"function\") {\n    return options.fallback.apply(null, arguments)\n  }\n\n  switch (options.fallback) {\n    case \"copy\":\n      return processCopy(...arguments)\n    case \"rebase\":\n      return processRebase(...arguments)\n    default:\n      return\n  }\n}\n\n/**\n * Inline image in url()\n *\n * @type {PostcssUrl~UrlProcessor}\n * @param {PostcssUrl~Asset} asset\n * @param {PostcssUrl~Dir} dir\n * @param {PostcssUrl~Options} options\n * @param {PostcssUrl~Decl} decl\n * @param {Function} warn\n * @param {Result} result\n * @param {Function} addDependency\n *\n * @returns {string|Undefined}\n */\nexport default async function(asset, dir, options, decl, warn, result, addDependency) {\n  const file = getFile(asset, options, dir, warn)\n\n  if (!file) return\n\n  if (!file.mimeType) {\n    warn(`Unable to find asset mime-type for ${file.path}`)\n\n    return\n  }\n\n  const maxSize = (options.maxSize || 0) * 1024\n\n  // For some reason we can't use `const` for `stats` as this breaks\n  // Babel v7 on Node v6. Re-evaluate in some month if fixed.\n  // Log: https://travis-ci.org/sebastian-software/postcss-smart-asset/builds/408069998\n  if (maxSize) {\n    let stats = fs.statSync(file.path)\n\n    if (stats.size >= maxSize) {\n      return processFallback.apply(this, arguments)\n    }\n  }\n\n  const isSvg = file.mimeType === \"image/svg+xml\"\n  const defaultEncodeType = isSvg ? \"encodeURIComponent\" : \"base64\"\n  const encodeType = options.encodeType || defaultEncodeType\n\n  // Warn for svg with hashes/fragments\n  if (isSvg && asset.hash && !options.ignoreFragmentWarning) {\n    // eslint-disable-next-line max-len\n    warn(\n      `Image type is svg and link contains #. PostCSS Smart Asset can't handle SVG fragments. SVG file fully inlined. ${\n        file.path\n      }`\n    )\n  }\n\n  addDependency(file.path)\n\n  const optimizeSvgEncode = isSvg && options.optimizeSvgEncode\n  const encodedStr = await encodeFile(file, encodeType, optimizeSvgEncode)\n  const resultValue =\n    options.includeUriFragment && asset.hash ? encodedStr + asset.hash : encodedStr\n\n  // wrap url by quotes if percent-encoded svg\n  return isSvg && encodeType !== \"base64\" ? `\"${resultValue}\"` : resultValue\n}\n","/* eslint-disable */\nimport matchOptions from \"./match-options\"\nimport { getPathDeclFile, getDirDeclFile, prepareAsset } from \"./paths\"\n\nimport copyType from \"../type/copy\"\nimport customType from \"../type/custom\"\nimport inlineType from \"../type/inline\"\nimport rebaseType from \"../type/rebase\"\n\nconst typeMap = {\n  copy: copyType,\n  custom: customType,\n  inline: inlineType,\n  rebase: rebaseType\n}\n\n/**\n * Restricted modes\n *\n * @type {String[]}\n */\nconst PROCESS_TYPES = [\"rebase\", \"inline\", \"copy\", \"custom\"]\n\nconst getUrlProcessorType = (optionUrl) =>\n  typeof optionUrl === \"function\" ? \"custom\" : optionUrl || \"rebase\"\n\n/**\n * @param {String} optionUrl\n * @returns {PostcssUrl~UrlProcessor}\n */\nfunction getUrlProcessor(optionUrl) {\n  const mode = getUrlProcessorType(optionUrl)\n\n  if (PROCESS_TYPES.indexOf(mode) === -1) {\n    throw new Error(`Unknown mode for postcss-url: ${mode}`)\n  }\n\n  return typeMap[mode]\n}\n\n/**\n * @param {PostcssUrl~UrlProcessor} urlProcessor\n * @param {Result} result\n * @param {Decl} decl\n * @returns {Function}\n */\nconst wrapUrlProcessor = (urlProcessor, result, decl) => {\n  const warn = (message) => decl.warn(result, message)\n  const addDependency = (file) =>\n    result.messages.push({\n      type: \"dependency\",\n      file,\n      parent: getPathDeclFile(decl)\n    })\n\n  return (asset, dir, option) =>\n    urlProcessor(asset, dir, option, decl, warn, result, addDependency)\n}\n\n/**\n * @param {String} url\n * @param {Dir} dir\n * @param {Options} options\n * @param {Result} result\n * @param {Decl} decl\n * @returns {String|undefined}\n */\nexport const replaceUrl = (url, dir, options, result, decl) => {\n  const asset = prepareAsset(url, dir, decl)\n\n  const matchedOptions = matchOptions(asset, options)\n\n  if (!matchedOptions) return\n\n  const process = (option) => {\n    const wrappedUrlProcessor = wrapUrlProcessor(\n      getUrlProcessor(option.url),\n      result,\n      decl\n    )\n\n    return wrappedUrlProcessor(asset, dir, option)\n  }\n\n  if (Array.isArray(matchedOptions)) {\n    matchedOptions.forEach((option) => (asset.url = process(option)))\n  } else {\n    asset.url = process(matchedOptions)\n  }\n\n  return asset.url\n}\n\nconst WITH_QUOTES = /^['\"]/\n\nfunction buildResult(newUrl, matched, before, after) {\n  if (!newUrl) return matched\n\n  if (WITH_QUOTES.test(newUrl) && WITH_QUOTES.test(after)) {\n    before = before.slice(0, -1)\n    after = after.slice(1)\n  }\n\n  return `${before}${newUrl}${after}`\n}\n\n/**\n * @param {String} from\n * @param {String} to\n * @param {PostcssUrl~Options} options\n * @param {Result} result\n * @param {Decl} decl\n * @returns {PostcssUrl~DeclProcessor}\n */\nexport const declProcessor = (from, to, options, result, decl) => {\n  const dir = { from, to, file: getDirDeclFile(decl) }\n  const pattern = /(url\\(\\s*['\"]?)([^\"')]+)([\"']?\\s*\\))/g\n\n  if (!pattern) {\n    return\n  }\n\n  const matches = decl.value.match(pattern)\n  if (!matches) {\n    return\n  }\n\n  return Promise.all(\n    matches.map((singleMatch, index) => {\n      const [matched, before, url, after] = /(url\\(\\s*['\"]?)([^\"')]+)([\"']?\\s*\\))/.exec(\n        singleMatch\n      )\n\n      const replacement = replaceUrl(url, dir, options, result, decl)\n\n      if (replacement) {\n        if (replacement.then) {\n          return replacement.then((resolved) => {\n            //const fullReplacement = resolved == null ? null : `${before}${resolved}${after}`\n            //return fullReplacement\n            return buildResult(resolved, singleMatch, before, after)\n          })\n        } else {\n          // const fullReplacement = `${before}${replacement}${after}`\n          return buildResult(replacement, singleMatch, before, after)\n        }\n      } else {\n        return null\n      }\n    })\n  ).then((values) => {\n    decl.value = decl.value.replace(pattern, (match) => {\n      const replacement = values.shift()\n      return replacement == null ? match : replacement\n    })\n  })\n\n  /*\n  console.log(\"MATCHES:\",matches)\n  if (matches) {\n\n    const promises = []\n\n    matches.forEach((singleMatch) => {\n      const [ matched, before, url, after ] = singleMatch.exec(pattern)\n\n      console.log(\"BEFORE/URL/AFTER:\", before, url, after)\n\n      const newUrl = replaceUrl(url, dir, options, result, decl)\n      if (newUrl) {\n        if (newUrl.then) {\n\n        } else {\n          decl.value.replace(singleMatch, `${before}${newUrl}${after}`)\n\n\n        }\n\n      }\n\n\n\n    })\n\n\n*/\n\n  /*\n  if (matches) {\n    const [ matched, before, url, after ] = matches\n\n    const newUrl = replaceUrl(url, dir, options, result, decl)\n    console.log(\"URL:\",url,\"=>\",newUrl)\n\n    if (newUrl) {\n\n      if (newUrl.then) {\n\n        return newUrl.then((resolved) => {\n          decl.value.replace(matched, `${before}${resolved}${after}`)\n        })\n\n      } else {\n        decl.value = decl.value.replace(matched, `${before}${newUrl}${after}`)\n      }\n    }\n\n    return Promise.all(promises)\n  }\n  */\n\n  /*\n  decl.value = decl.value.replace(pattern, (matched, before, url, after) => {\n    const newUrl = replaceUrl(url, dir, options, result, decl)\n    if (newUrl && newUrl.then) {\n      // If it's a promise\n\n      return newUrl.then((result) => {\n        return `${before}${result}${after}`\n      })\n    }\n\n    return newUrl ? `${before}${newUrl}${after}` : matched\n  })\n  */\n}\n\n/**\n * @typedef {Object} PostcssUrl~Options - postcss-url Options\n * @property {String} [url=^rebase|inline|copy|custom] - processing mode\n * @property {Minimatch|RegExp|Function} [filter] - filter assets by relative pathname\n * @property {String} [assetsPath] - absolute or relative path to copy assets\n * @property {String|String[]} [basePath] - absolute or relative paths to search, when copy or inline\n * @property {Number} [maxSize] - max file size in kbytes for inline mode\n * @property {String} [fallback] - fallback mode if file exceeds maxSize\n * @property {Boolean} [useHash] - use file hash instead filename\n * @property {Boolean} [prependName] - if useHash is true, appends the hash to the filename instead of replacing it\n * @property {HashOptions} [hashOptions] - params for generating hash name\n */\n","import path from \"path\"\nimport postcss from \"postcss\"\nimport { declProcessor } from \"./lib/decl-processor\"\n\n/**\n *\n * @type {Plugin}\n */\nexport default postcss.plugin(\"postcss-smart-asset\", (options = {}) => {\n  return (root, result) => {\n    const opts = result.opts\n    const from = opts.from ? path.dirname(opts.from) : \".\"\n    const to = opts.to ? path.dirname(opts.to) : from\n\n    const promises = []\n\n    root.walkDecls((decl) => {\n      const waiter = declProcessor(from, to, options, result, decl)\n      if (waiter && waiter.then) {\n        promises.push(waiter)\n      }\n    })\n\n    return Promise.all(promises)\n  }\n})\n\n/**\n * @callback PostcssUrl~UrlProcessor\n * @param {String} from from\n * @param {String} dirname to dirname\n * @param {String} oldUrl url\n * @param {String} to destination\n * @param {Object} options plugin options\n * @param {Object} decl postcss declaration\n * @return {String|undefined} new url or undefined if url is old\n */\n\n/**\n * @typedef {Object} PostcssUrl~HashOptions\n * @property {Function|String} [method=^xxhash32|xxhash64] - hash name or custom function, accepting file content\n * @see https://github.com/pierrec/js-xxhash\n * @property {Number} [shrink=8] - shrink hash string\n */\n\n/**\n * @typedef {Object} Decl - postcss decl\n * @see http://api.postcss.org/Declaration.html\n */\n\n/**\n * @typedef {Object} Result - postcss result\n * @see http://api.postcss.org/Result.html\n */\n"],"names":["normalize","assetUrl","path","sep","replace","charAt","isUrlWithoutPathname","indexOf","test","isUrlShouldBeIgnored","options","basePath","getAssetsPath","baseDir","assetsPath","relative","resolve","getTargetDir","dir","from","to","process","cwd","getPathDeclFile","decl","source","input","file","getDirDeclFile","filename","dirname","getPathByBasePath","dirFrom","relPath","Array","isArray","map","pathItem","prepareAsset","parsedUrl","url","parse","pathname","absolutePath","join","originUrl","relativePath","search","hash","matchesFilter","asset","pattern","relativeToRoot","minimatch","filter","RegExp","Function","matchOption","option","matched","isMultiOption","multi","matchOptions","optionIndex","findIndex","matchedOption","length","extendOptions","slice","concat","getFile","warn","paths","filePath","find","fs","existsSync","mimeType","mime","getType","getHashName","getHashedName","processCopy","result","addDependency","useHash","hashOptions","assetRelativePath","keepName","pathObj","fileName","name","base","format","targetDir","newAssetBaseDir","newAssetPath","newRelativeAssetPath","cpFile","overwrite","getCustomProcessor","apply","arguments","readFileAsync","pify","readFile","optimizedSvgEncode","svgContent","encodeURIComponent","AZ","toLowerCase","encodeType","shouldOptimizeSvgEncode","dataMime","contents","toString","encodeFunc","encodeURI","content","encodedStr","rebasedUrl","processFallback","fallback","processRebase","maxSize","stats","statSync","size","isSvg","defaultEncodeType","ignoreFragmentWarning","optimizeSvgEncode","encodeFile","resultValue","includeUriFragment","bind","typeMap","copy","copyType","custom","customType","inline","inlineType","rebase","rebaseType","PROCESS_TYPES","getUrlProcessorType","optionUrl","getUrlProcessor","mode","Error","wrapUrlProcessor","urlProcessor","message","messages","push","type","parent","replaceUrl","matchedOptions","wrappedUrlProcessor","forEach","WITH_QUOTES","buildResult","newUrl","before","after","declProcessor","matches","value","match","Promise","all","singleMatch","exec","replacement","then","resolved","values","shift","postcss","plugin","root","opts","promises","walkDecls","waiter"],"mappings":"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"}